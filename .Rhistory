quantdata <- intersect(design,quantdata)
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- intersect(quantdata, design)
View(quantdata)
quantdata <- t(counts(ddsHTSeqMF))
View(quantdata)
quantdata <- as.data.frame(quantdata)
View(quantdata)
quantdata <- intersect(quantdata, design)
quantdata <- inner_join(quantdata, design)
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantids <- rownames(design)
view(quantids)
View(quantids)
quantdata <- quantdata[match(quantids),]
quantdata <- quantdata[quantids,]
View(quantdata)
quantdata <- t(quantdata)
dge <- DGEList(counts=quantdata)
v=voom(dge,design,plot=T, normalize="quantile")
design <- as.matrix(design)
v=voom(dge,design,plot=T, normalize="quantile")
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="Nigerian.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design <- model.matrix(~design)
View(design)
matdesign <- as.matrix(design)
View(design)
matdesign <- as.matrix(design)
colnames(matdesign) <- colnames(design)
rownames(matdesign) <- rownames(design)
v=voom(dge,matdesign,plot=T, normalize="quantile")
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="Nigerian.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design$Nigerian.Basal <- ifelse (design$sampleCondition==0, 1, 0)
design$TCGA_white.Basal <- ifelse (design$sampleCondition==1, 1, 0)
design$sampleCondition <- NULL
View(matdesign)
design <- model.matrix(~0+design$Nigerian.Basal+design$TCGA_white.Basal)
View(design)
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantids <- rownames(design)
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
dge <- DGEList(counts=quantdata)
v=voom(dge,matdesign,plot=T, normalize="quantile")
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="Nigerian.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design$Nigerian.Basal <- ifelse (design$sampleCondition==0, 1, 0)
design$TCGA_white.Basal <- ifelse (design$sampleCondition==1, 1, 0)
design$sampleCondition <- NULL
quantids <- rownames(design)
design <- model.matrix(~0+design$Nigerian.Basal+design$TCGA_white.Basal)
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantids <- rownames(design)
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="Nigerian.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design$Nigerian.Basal <- ifelse (design$sampleCondition==0, 1, 0)
design$TCGA_white.Basal <- ifelse (design$sampleCondition==1, 1, 0)
design$sampleCondition <- NULL
quantids <- rownames(design)
design <- model.matrix(~0+design$Nigerian.Basal+design$TCGA_white.Basal)
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
View(quantdata)
dge <- DGEList(counts=quantdata)
View(dge)
keep <- filterByExpr(dge, design)
dge <- dge[keep,,keep.lib.sizes=FALSE]
View(dge)
dge <- calcNormFactors(dge)
dge$samples$norm.factors
dge$samples$group
rownames(design) <- quantids
colnames(design) <- c("Nigerian", "TCGA_white")
View(design)
v=voom(quantdata,design,plot=T, normalize="quantile")
fit <- lmFit(v, design)
topTable(fit, coef=ncol(design))
fit <- eBayes(fit)
topTable(fit, coef=ncol(design))
chrom <- fit$genes$Chr
plotMD(fit, column=2, status=chrom, values=c("X","Y", "X|Y"),
hl.col=c("red","blue", "green3"), main="Male vs Female",legend="bottomright")
> abline(h=0,col="darkgrey")
v=voom(quantdata,design,plot=T, normalize="quantile")
nrows(quantdata)
nrow(quantdata)
quantdata <- quantdata[rowSums(quantdata) > 0, ]
nrow(quantdata)
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 1, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 50, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
nrow(quantdata)
quantdata <- quantdata[rowSums(quantdata) > 100, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 0, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 0, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 100, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 0, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
quantdata <- quantdata[rowSums(quantdata) > 0, ]
v=voom(quantdata,design,plot=T, normalize="quantile")
View(fit)
fit <- lmFit(v, design)
fit <- eBayes(fit)
View(fit)
hist(fit$p.value[,2],col=trop[3],main="No genes DE",breaks=100)
hist(fit$p.value[,2],main="No genes DE",breaks=100)
fit$p.value[]
rownames(fit$p.value)
colnames(fit$p.value)
hist(fit$p.value[,2])
hist(fit$p.value)
hist(fit$p.value, ylim=1000)
hist(fit$p.value)
hist(fit$p.value, ylim(0,1000))
hist(fit$p.value)
hist(fit$p.value, ylim=c(0,1000))
hist(fit$p.value, ylim=c(0,1000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin Nigerian and \nTCGA white breast cancer patients\n quantile corrected"
)
hist(fit$p.value, ylim=c(0,1000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin Nigerian and \nTCGA white breast cancer patients\n quantile corrected")
View(v)
plotMDS(v$E)
View(fit)
dt <- decideTests(fit)
summary(dt)
contr.matrix <- makeContrasts( NigerianvsTCGA = Nigerian-TCGA_white, levels=colnames(design))
v=voom(quantdata,design,plot=T, normalize="quantile")
fit <- lmFit(v, design)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,1000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin Nigerian and \nTCGA white breast cancer patients\n quantile corrected")
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin Nigerian and \nTCGA white breast cancer patients\n quantile corrected")
install.packages("glimma")
BiocManager::install(Glimma)
BiocManager::install("Glimma")
library(glimma)
library(Glimma)
glMDPlot(fit, coef=1, status=dt, main=colnames(fit)[1],
side.main="ENTREZID", counts=quantdata, groups=group, launch=FALSE)
glMDPlot(fit, coef=1, status=dt, main=colnames(fit)[1],
side.main="ENTREZID", counts=quantdata, groups=design, launch=FALSE)
glXYPlot(x=fit$coef, y=fit$lod)
glXYPlot(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds",
status=dt, anno=anno, side.main="ID",
counts=vm, groups=groups, sample.cols=sample.cols)
glXYPlot(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds",
status=dt, anno=anno, side.main="ID",
counts=quantdata, groups=groups, sample.cols=sample.cols)
glXYPlot(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds",
status=dt, anno=anno, side.main="ID")
glXYPlot(x=fit$coef, y=fit$lod, xlab="logFC", ylab="logodds")
plot(fit$coeff, fit$lod, pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70))
with(subset(restemp4, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(restemp4, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$condition1)
assay(vsd) <- mat
plotPCA(vsd, intgroup=c("condition1", "condition2"))
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 250)
hm  <- assay(vsd)[ topVarGenes, ]
hm  <- hm - rowMeans(hm)
anno <- as.data.frame(colData(vsd)[, c("condition1", "condition2")])
colnames(anno) <- c("Ethnicity", "PAM50-subtype")
rownames(anno) <- colnames(vsd)
pheatmap(hm, annotation_col = anno, cluster_rows=TRUE, cluster_cols=TRUE, clustering_distance_rows = "correlation", clustering_distance_cols = "correlation", clustering_method = "complete", show_rownames=FALSE, show_colnames = FALSE, main="Heat map: Relative VST-transformed\ncounts across samples after Limma:removeBatchEffect")
View(fit)
qvals<-p.adjust(fit$p.value[,2], method='FDR')
fit$p.value[,2]
fit$p.value[,1]
qvals<-p.adjust(fit$p.value[,1], method='fdr')
fit$coefficients[,2]
fit$coefficients[,1]
rownames(fit)
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
temp <- gsub("[.].+", "", rownames(fit)))
df_limma$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=df_limma$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
View(df_limma)
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
temp = gsub("[.].+", "", rownames(fit)))
View(df_limma)
df_limma$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=df_limma$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
View(df_limma)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(restemp4, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(restemp4, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>5)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>5)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA white breast cancer patients\nquantile corrected", xlim=c(-20,20), ylim=c(0,30)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
dge <- DGEList(counts=quantdata)
dge <- calcNormFactors(dge)
v=voom(dge,design,plot=T, normalize="quantile")
fit <- lmFit(v, design)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin Nigerian and \nTCGA white breast cancer patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
temp = gsub("[.].+", "", rownames(fit)))
df_limma$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=df_limma$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA white breast cancer patients\nquantile corrected", xlim=c(-20,20), ylim=c(0,30)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in Nigerian and \nTCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_black.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design$TCGA_black.Basal <- ifelse (design$sampleCondition==0, 1, 0)
design$TCGA_white.Basal <- ifelse (design$sampleCondition==1, 1, 0)
design$sampleCondition <- NULL
quantids <- rownames(design)
design <- model.matrix(~0+design$TCGA_black.Basal+design$TCGA_white.Basal)
rownames(design) <- quantids
colnames(design) <- c("TCGA_black", "TCGA_white")
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
quantdata <- quantdata[rowSums(quantdata) > 0, ]
contr.matrix <- makeContrasts(TCGAblackvsTCGAwhite = TCGA_black-TCGA_white, levels=colnames(design))
dge <- DGEList(counts=quantdata)
dge <- calcNormFactors(dge)
v=voom(dge,design,plot=T, normalize="quantile")
fit <- lmFit(v, design)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential\n gene expression between basal breast cancers \nin TCGA black and \nTCGA white breast cancer patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
temp = gsub("[.].+", "", rownames(fit)))
df_limma$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=df_limma$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between basal \nbreast cancers in TCGA black and \nTCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,70)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
View(batchval)
table(batchval, sampleConditionPAM50)
sampletableNigerian <- sampleTable2
sampletableNigerian <- subset(sampletableNigerian, batch=="batch23" | batch=="batch5")
sampletableNigerian$condition1 <- NULL
View(sampletableNigerian)
table(batchval, sampleConditionPAM50)
sampletableNigerian <- sampleTable2
sampletableNigerian <- subset(sampletableNigerian, batch=="batch23" | batch=="batch5")
sampletableNigerian$condition1 <- NULL
dsHTSeqMFNigerian <- DESeqDataSetFromHTSeqCount(sampleTable=sampletableNigerian,
directory=FOLDER,
design=~batch)
dsHTSeqMFNigerian <- dsHTSeqMFNigerian[rowSums(counts(dsHTSeqMFNigerian)) > 0, ] #Pre-filtering the dataset by removing the rows without information about gene expression
ddsMFNigerianexample <- DESeq(dsHTSeqMFNigerian)
resNigerianNigerian<- results(ddsMFNigerianexample, contrast=c("batch", "batch23", "batch5"), alpha=0.05)
resNigerianNigerian <- resNigerianNigerian[(resNigerianNigerian$log2FoldChange >= fc | resNigerianNigerian$log2FoldChange <= -fc),]
resNigerianNigerian <- subset(resNigerianNigerian, padj < fdr)
nrow(resNigerianNigerian) #More genes are considered significant with the batch correction method
restempcheck <- NULL
restempcheck <- lfcShrink(ddsMFNigerianexample, contrast=c("batch", "batch23", "batch5"), res = resNigerianNigerian, type="ashr", optmethod = "mixEM")
restempcheck$temp <- row.names(restempcheck)
restempcheck$temp <- gsub("[.].+", "", restempcheck$temp)
restempcheck$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=restempcheck$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
hist(restempcheck$pvalue, main="Histogram of unadjusted p-values of differential\n gene expression between \n grouped Nigerian breast cancer patients")
with(restempcheck, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential\n gene expression between \n grouped Nigerian breast cancer patients", xlim=c(-50,50), ylim=c(0,70)))
with(subset(restempcheck, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(restempcheck, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
rescrosstype<- results(ddsMF, contrast=c("sampleCondition", "Nigerian.Basal", "Nigerian.Her2"), alpha=0.05)
nrow(rescrosstype)
#resBasal2$foldChange <- NA
#row.pos <- which(! is.na(resBasal2$log2FoldChange) &
#                resBasal2$log2FoldChange >= 0)
#row.neg <- which(! is.na(resBasal2$log2FoldChange) &
#                resBasal2$log2FoldChange < 0)
#resBasal2$foldChange[row.pos] <- 2^resBasal2$log2FoldChange[row.pos]
#resBasal2$foldChange[row.neg] <- -2^((-1) * resBasal2$log2FoldChange[row.neg])
#resBasal2 <- data.frame(id = row.names(resBasal2), resBasal2)
#before <- nrow(resBasal2)
#resBasal2 <- resBasal2[!is.na(resBasal2$foldChange) & ! is.na(resBasal2$padj),];
#after <- nrow(resBasal2)
#print(paste0('Genes removed = ', (before - after),
#             ' (fold change is NA)'))
rescrosstype <- rescrosstype[(rescrosstype$log2FoldChange >= fc | rescrosstype$log2FoldChange <= -fc),]
rescrosstype <- subset(rescrosstype, padj < fdr)
nrow(rescrosstype) #More genes are considered significant with the batch correction method
restempcheck <- NULL
restempcheck <- lfcShrink(ddsMF, contrast=c("sampleCondition", "Nigerian.Basal", "Nigerian.Her2"), res = rescrosstype, type="ashr", optmethod = "mixEM")
restempcheck$temp <- row.names(restempcheck)
restempcheck$temp <- gsub("[.].+", "", restempcheck$temp)
restempcheck$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=restempcheck$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
hist(restempcheck$pvalue, main="Histogram of unadjusted p-values of differential\n gene expression between \n Nigerian basal and Nigerian Her2 breast cancer patients")
with(restempcheck, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential\n gene expression between \n Nigerian basal and Nigerian Her2 breast cancer patients", xlim=c(-50,50), ylim=c(0,70)))
with(subset(restempcheck, padj<0.01 & abs(log2FoldChange)>25), points(log2FoldChange, -log10(pvalue), pch=20, col="blue"))
with(subset(restempcheck, padj<0.01 & abs(log2FoldChange)>25), textxy(log2FoldChange, -log10(padj), labs=symbol, cex=.5))
genename <- "ENSG00000141736.9"
her2comparematrix <- plotCounts(ddsMF, gene = genename, intgroup=c("condition1", "condition2"), main="Distribution of HER2 expression across groups", returnData = TRUE)
her2comparematrix <- her2comparematrix %>% subset(condition1=="Nigerian" & (condition2=="Her2" | condition2=="Basal"))
ggplot(her2comparematrix, aes (x=condition2, y=count)) + geom_point() + labs(title="Comparison of normalized RNAseq counts of HER2 expression between\nNigerian basal tumors and Nigerian HER2 tumors") + xlab("Breast cancer Subtype") + ylab("Normalized RNAseq count (pre DE)") + scale_y_log10()
her2tempassay <- subset(rescrosstype, rownames(rescrosstype)=="ENSG00000141736.9")
her2tempassay[,1:6]
tempassay <- as.data.frame(assay(ddsHTSeqMF))
tempassay <- dplyr::select(tempassay, contains("LIB"))
tempassay <- dplyr::select(tempassay, matches('Basal|Her2'))
tempassay <- subset(tempassay, rownames(tempassay)=="ENSG00000141736.9")
tempassaybasal <- dplyr::select(tempassay, matches('Basal'))
tempassayher2 <- dplyr::select(tempassay, matches('Her2'))
tempassaybasal <-as.numeric(tempassaybasal)
tempassayher2 <-as.numeric(tempassayher2)
t.test (tempassaybasal, tempassayher2)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
genenames <- c("ENSG00000150991.10", "ENSG00000134644.11", "ENSG00000107771.11", "ENSG00000125755.14")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
t_set1pca <- t(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
ruv.pca <- prcomp(t_set1pca[1:19745,])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
View(t_set1pca)
ruv.pca <- prcomp(t_set1pca[1:19745,])
t_set1pca <- as.data.frame(t_set1pca)
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
ruv.pca <- prcomp(t_set1pca[1:19745,])
t_set1pca <- as.data.frame(t_set1pca)
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
genenames <- c("ENSG00000150991.10", "ENSG00000134644.11", "ENSG00000107771.11", "ENSG00000125755.14")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- as.data.frame(set1$normalizedCounts)
View(set1pca)
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", ylim=c(-0.05, 0.05))
quant.pca <- prcomp(t_norm_countmatrix[,1:19745])
autoplot(quant.pca, data=t_norm_countmatrix, colour='sampleCondition', main="PCA of quantile normalization results prior to DE analysis")
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
plotPCA(t_set1pca)
View(t_set1pca)
t_set1pca
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
plotPCA(ruv.pca)
plotpca(set1pca)
plotPCA(set1$normalizedCounts)
rm(set1pca)
rm(sett_set1pca)
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
t_set1pca <- t(t_set1pca)
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
autoplot(ruv.pca, data=t_set1pca, color='red', main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
View(t_set1pca)
t_set1pca <- t(t_set1pca)
plotPCA(t_set1pca)
t_set1pca <- as.data.frame (t_set1pca)
ruv.pca <- prcomp(t_set1pca[1:19745,])
autoplot(ruv.pca, data=t_set1pca, main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
plotPCA(t_set1pca)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
t_set1pca <- t(t_set1pca)
plotPCA(t_set1pca)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
plotPCA(t_set1pca)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
plotPCA(t_set1pca)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- set1$normalizedCounts
t_set1pca <- t(set1pca)
t_set1pca <- as.data.frame(t_set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics
ruv.pca <- prcomp(t_set1pca[,1:19745])
View(ruv.pca)
autoplot(ruv.pca, data=t_set1pca, main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.0005, 0.0005))
autoplot(ruv.pca, data=t_set1pca, main="PCA of RUV normalization results prior to DE analysis", xlim=c(-0.05, 0.05))
