pathway.Nigerian.TCGAwhite.LumB <- as.data.frame(df_limma)
pathway.Nigerian.TCGAwhite.LumB$foldChange <- NA
row.pos <- which(! is.na(pathway.Nigerian.TCGAwhite.LumB$log2FoldChange) &
pathway.Nigerian.TCGAwhite.LumB$log2FoldChange >= 0)
row.neg <- which(! is.na(pathway.Nigerian.TCGAwhite.LumB$log2FoldChange) &
pathway.Nigerian.TCGAwhite.LumB$log2FoldChange < 0)
pathway.Nigerian.TCGAwhite.LumB$foldChange[row.pos] <- 2^pathway.Nigerian.TCGAwhite.LumB$log2FoldChange[row.pos]
pathway.Nigerian.TCGAwhite.LumB$foldChange[row.neg] <- -2^((-1) * pathway.Nigerian.TCGAwhite.LumB$log2FoldChange[row.neg])
pathway.Nigerian.TCGAwhite.LumB$log2FoldChange <- NULL
pathway.Nigerian.TCGAwhite.LumB$ENSEMBL <- pathway.Nigerian.TCGAwhite.LumB$anno$GeneID
pathway.Nigerian.TCGAwhite.LumB$SYMBOL <- pathway.Nigerian.TCGAwhite.LumB$anno$symbol
pathway.Nigerian.TCGAwhite.LumB$anno$GeneID <- NULL
pathway.Nigerian.TCGAwhite.LumB$anno$symbol <- NULL
pathway.Nigerian.TCGAwhite.LumB.flt <- pathway.Nigerian.TCGAwhite.LumB %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
genes.all <- pathway.Nigerian.TCGAwhite.LumB
genes.sig <- pathway.Nigerian.TCGAwhite.LumB.flt
genes.all$ENSEMBL <- gsub('[.]\\d+', '', genes.all$ENSEMBL, perl = TRUE)
genes.sig$ENSEMBL <- gsub('[.]\\d+', '', genes.sig$ENSEMBL, perl = TRUE)
genes.all.anno <- bitr(geneID   =  genes.all$ENSEMBL,
fromType = 'GENEID',
toType   = c('ENTREZID', 'SYMBOL'),
OrgDb    = 'EnsDb.Hsapiens.v75',
drop     = TRUE)
genes.all.anno <- genes.all.anno[which(!duplicated(genes.all.anno$ENTREZID)), ]
row.names(genes.all.anno) <- genes.all.anno$ENTREZID
genes.all.anno$ENSEMBL <- genes.all.anno$GENEID
genes.all.anno$GENEID <- NULL
genes.all.anno <- merge(genes.all.anno, genes.all, by = 'ENSEMBL')
row.names(genes.all.anno) <- genes.all.anno$ENTREZID
genes.sig.anno <- genes.all.anno[genes.all.anno$ENSEMBL %in%
genes.sig$ENSEMBL,]
gene.list <- genes.all.anno$foldChange
names(gene.list) <- genes.all.anno$ENTREZID
gene.list <- sort(gene.list, decreasing = TRUE)
ego <- enrichGO(gene          = genes.sig.anno$ENTREZID,
universe      = as.character(genes.all.anno$ENTREZID),
OrgDb         = 'org.Hs.eg.db',
ont           = "BP",
pAdjustMethod = "fdr",
pvalueCutoff  = 0.05,
readable      = TRUE)
as.data.frame(ego)
save(ego, file="GO-Nigerian-TCGAwhite-LumB.significantgenes.fdr0.05.fc1.5.enrichGO.woribosomes.RData")
write.csv(ego, file="GO-Nigerian-TCGAwhite-LumB.significantgenes.fdr0.05.fc1.5.enrichGO.woribosomes.csv")
options(jupyter.plot_mimetypes = "image/svg+xml")
options(repr.plot.width = 10, repr.plot.height = 5)
egokegg <- ego
for(i in 1:5) {
egokegg <- dropGO(egokegg, level = i)
}
p1 <- barplot(egokegg)
p2 <- dotplot(egokegg)
plot(p1)
plot(p2)
designNvsWHER2 <- design
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="TCGA_white.Her2", 0, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="Nigerian.Her2", 1, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition==0 | designNvsWHER2$sampleCondition==1, designNvsWHER2$sampleCondition, NA)
designNvsWHER2 <- designNvsWHER2 %>% subset(is.na(sampleCondition)==FALSE)
designNvsWHER2$TCGA_white.Her2 <- ifelse (designNvsWHER2$sampleCondition==0, 1, 0)
designNvsWHER2$Nigerian.Her2 <- ifelse (designNvsWHER2$sampleCondition==1, 1, 0)
designNvsWHER2$sampleCondition <- NULL
mm <- model.matrix(~0+designNvsWHER2$TCGA_white.Her2+designNvsWHER2$Nigerian.Her2)
quantids <- rownames(designNvsWHER2)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_white", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
v=voom(d,designNvsWHER2,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_white.Her2-Nigerian.Her2, levels=colnames(designNvsWHER2))
fit <- lmFit(v, designNvsWHER2)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between Her2+ breast cancers in Nigerian and TCGA white patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between Her2+ \nbreast cancers in Nigerian and TCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
FOLDER <- "/Users/parajago/Research-Local/RNAseq-Local/Inputs/NigerianTCGA_quants-proteincoding"
sampleFiles <- grep("htseq.counts",list.files(FOLDER),value=TRUE)
#Differential gene expression setup based on race (b/w/other)
sampleConditionrace <- sampleFiles
countVar2=1
for (sample in sampleConditionrace){
if (stri_detect_fixed(sample,"LIB")==TRUE){
sampleConditionrace[countVar2] <- "Nigerian"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"black")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_black"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"white")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_white"
countVar2=countVar2+1
} else{
sampleConditionrace[countVar2] <- "TCGA_other"
countVar2=countVar2+1
}
}
#Condition based on PAM50 subtype
sampleConditionPAM50 <- sampleFiles
countVar2=1
for (sample in sampleConditionPAM50){
if (stri_detect_fixed(sample,"Her2")==TRUE){
sampleConditionPAM50[countVar2] <- "Her2"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"Basal")==TRUE){
sampleConditionPAM50[countVar2] <- "Basal"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumA")==TRUE){
sampleConditionPAM50[countVar2] <- "LumA"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumB")==TRUE){
sampleConditionPAM50[countVar2] <- "LumB"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"PAMNL")==TRUE){
sampleConditionPAM50[countVar2] <- "Normal"
countVar2=countVar2+1
} else{
sampleConditionPAM50[countVar2] <- "PAM_other"
countVar2=countVar2+1
}
}
#Condition based on batch (relevant to the Nigerian patients only; no difference in batch for the TCGA patients)
batchval <- sampleFiles
countVar2=1
for (sample in batchval){
if (stri_detect_fixed(sample,"batch1")==TRUE){
batchval[countVar2] <- "batch1"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch23")==TRUE){
batchval[countVar2] <- "batch23"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch4")==TRUE){
batchval[countVar2] <- "batch4"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch5")==TRUE){
batchval[countVar2] <- "batch5"
countVar2=countVar2+1
} else{
batchval[countVar2] <- "batchT"
countVar2=countVar2+1
}
}
table(sampleConditionrace, sampleConditionPAM50)
sampleTable <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
batch=batchval)
sampleTable$sampleCondition <- paste(sampleTable$condition1, sampleTable$condition2, sep=".")
ddsHTSeqMF <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,
directory=FOLDER,
design=~sampleCondition)
ddsHTSeqMF <- ddsHTSeqMF[rowSums(counts(ddsHTSeqMF)) > 0, ] #Pre-filtering the dataset by removing the rows without any information about gene expression -> this removes 603 genes
designNvsWHER2 <- design
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="TCGA_white.Her2", 0, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="Nigerian.Her2", 1, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition==0 | designNvsWHER2$sampleCondition==1, designNvsWHER2$sampleCondition, NA)
designNvsWHER2 <- designNvsWHER2 %>% subset(is.na(sampleCondition)==FALSE)
designNvsWHER2$TCGA_white.Her2 <- ifelse (designNvsWHER2$sampleCondition==0, 1, 0)
designNvsWHER2$Nigerian.Her2 <- ifelse (designNvsWHER2$sampleCondition==1, 1, 0)
designNvsWHER2$sampleCondition <- NULL
mm <- model.matrix(~0+designNvsWHER2$TCGA_white.Her2+designNvsWHER2$Nigerian.Her2)
quantids <- rownames(designNvsWHER2)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_white", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
v=voom(d,designNvsWHER2,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_white.Her2-Nigerian.Her2, levels=colnames(designNvsWHER2))
fit <- lmFit(v, designNvsWHER2)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between Her2+ breast cancers in Nigerian and TCGA white patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between Her2+ \nbreast cancers in Nigerian and TCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
designNvsWHER2 <- design
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="TCGA_white.Her2", 0, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="Nigerian.Her2", 1, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition==0 | designNvsWHER2$sampleCondition==1, designNvsWHER2$sampleCondition, NA)
designNvsWHER2 <- designNvsWHER2 %>% subset(is.na(sampleCondition)==FALSE)
designNvsWHER2$TCGA_white.Her2 <- ifelse (designNvsWHER2$sampleCondition==0, 1, 0)
designNvsWHER2$Nigerian.Her2 <- ifelse (designNvsWHER2$sampleCondition==1, 1, 0)
designNvsWHER2$sampleCondition <- NULL
table(sampleConditionPAM50)
table(sampleConditionPAM50,sampleConditionrace)
mm <- model.matrix(~0+designNvsWHER2$TCGA_white.Her2+designNvsWHER2$Nigerian.Her2)
quantids <- rownames(designNvsWHER2)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_white", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
v=voom(d,designNvsWHER2,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_white.Her2-Nigerian.Her2, levels=colnames(designNvsWHER2))
fit <- lmFit(v, designNvsWHER2)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between Her2+ breast cancers in Nigerian and TCGA white patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between Her2+ \nbreast cancers in Nigerian and TCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
FOLDER <- "/Users/parajago/Research-Local/RNAseq-Local/Inputs/NigerianTCGA_quants-proteincoding"
sampleFiles <- grep("htseq.counts",list.files(FOLDER),value=TRUE)
#Differential gene expression setup based on race (b/w/other)
sampleConditionrace <- sampleFiles
countVar2=1
for (sample in sampleConditionrace){
if (stri_detect_fixed(sample,"LIB")==TRUE){
sampleConditionrace[countVar2] <- "Nigerian"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"black")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_black"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"white")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_white"
countVar2=countVar2+1
} else{
sampleConditionrace[countVar2] <- "TCGA_other"
countVar2=countVar2+1
}
}
#Condition based on PAM50 subtype
sampleConditionPAM50 <- sampleFiles
countVar2=1
for (sample in sampleConditionPAM50){
if (stri_detect_fixed(sample,"Her2")==TRUE){
sampleConditionPAM50[countVar2] <- "Her2"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"Basal")==TRUE){
sampleConditionPAM50[countVar2] <- "Basal"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumA")==TRUE){
sampleConditionPAM50[countVar2] <- "LumA"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumB")==TRUE){
sampleConditionPAM50[countVar2] <- "LumB"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"PAMNL")==TRUE){
sampleConditionPAM50[countVar2] <- "Normal"
countVar2=countVar2+1
} else{
sampleConditionPAM50[countVar2] <- "PAM_other"
countVar2=countVar2+1
}
}
#Condition based on batch (relevant to the Nigerian patients only; no difference in batch for the TCGA patients)
batchval <- sampleFiles
countVar2=1
for (sample in batchval){
if (stri_detect_fixed(sample,"batch1")==TRUE){
batchval[countVar2] <- "batch1"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch23")==TRUE){
batchval[countVar2] <- "batch23"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch4")==TRUE){
batchval[countVar2] <- "batch4"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch5")==TRUE){
batchval[countVar2] <- "batch5"
countVar2=countVar2+1
} else{
batchval[countVar2] <- "batchT"
countVar2=countVar2+1
}
}
table(sampleConditionrace, sampleConditionPAM50)
sampleTable <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
batch=batchval)
sampleTable$sampleCondition <- paste(sampleTable$condition1, sampleTable$condition2, sep=".")
ddsHTSeqMF <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,
directory=FOLDER,
design=~sampleCondition)
ddsHTSeqMF <- ddsHTSeqMF[rowSums(counts(ddsHTSeqMF)) > 0, ] #Pre-filtering the dataset by removing the rows without any information about gene expression -> this removes 603 genes
countmatrix <- assay(ddsHTSeqMF) #Raw counts organized into matrix format from individual files
countmatrix2 <- log2(countmatrix + 1) #Basic transformation of the count data
plot(density(countmatrix2[,1]),lwd=3,ylim=c(0,.30), main="Density of counts with log2[count]+1 transformation ONLY")
for(i in 1:180){lines(density(countmatrix2[,i]),lwd=3)} #This demonstrates that there is a difference in distributions between the Nigerian and TCGA data with basic log transformation normalization
norm_countmatrix <- as.matrix(countmatrix2)
norm_countmatrix = normalize.quantiles(norm_countmatrix)
plot(density(norm_countmatrix[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization")
for(i in 1:180){lines(density(norm_countmatrix[,i]),lwd=3)} #This demonstrates the effect of comparative quantile normalization
colnames (norm_countmatrix) <- colnames (countmatrix2)
rownames (norm_countmatrix) <- rownames (countmatrix2)
norm_countmatrix <- as.data.frame(norm_countmatrix)
countmatrixNigerian <- dplyr::select(norm_countmatrix, contains("LIB"))
plot(density(countmatrixNigerian[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - Nigerian")
for(i in 1:96){lines(density(countmatrixNigerian[,i]),lwd=3)} #This demonstrates the result of the normalized Nigerian counts separately
tcgacolnames <- colnames(countmatrix)
tcgacolnames <- setdiff(tcgacolnames, colnames(countmatrixNigerian))
countmatrixTCGA <- norm_countmatrix[ , tcgacolnames]
plot(density(countmatrixTCGA[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - TCGA")
for(i in 1:84){
lines(density(countmatrixTCGA[,i]),lwd=3);
#  print(colnames(countmatrix)[i])
#  invisible(readline(prompt=i))
} #This demonstrates the result of the normalized TCGA counts separately
norm_countmatrix <- as.data.frame(norm_countmatrix)
t_norm_countmatrix <- t(norm_countmatrix)
t_norm_countmatrix <- cbind (t_norm_countmatrix, sampleTable) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
countmatrix <- assay(ddsHTSeqMF) #Raw counts organized into matrix format from individual files
countmatrix2 <- log2(countmatrix + 1) #Basic transformation of the count data
plot(density(countmatrix2[,1]),lwd=3,ylim=c(0,.30), main="Density of counts with log2[count]+1 transformation ONLY")
for(i in 1:175){lines(density(countmatrix2[,i]),lwd=3)} #This demonstrates that there is a difference in distributions between the Nigerian and TCGA data with basic log transformation normalization
norm_countmatrix <- as.matrix(countmatrix2)
norm_countmatrix = normalize.quantiles(norm_countmatrix)
plot(density(norm_countmatrix[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization")
for(i in 1:175){lines(density(norm_countmatrix[,i]),lwd=3)} #This demonstrates the effect of comparative quantile normalization
colnames (norm_countmatrix) <- colnames (countmatrix2)
rownames (norm_countmatrix) <- rownames (countmatrix2)
norm_countmatrix <- as.data.frame(norm_countmatrix)
countmatrixNigerian <- dplyr::select(norm_countmatrix, contains("LIB"))
plot(density(countmatrixNigerian[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - Nigerian")
for(i in 1:91){lines(density(countmatrixNigerian[,i]),lwd=3)} #This demonstrates the result of the normalized Nigerian counts separately
tcgacolnames <- colnames(countmatrix)
tcgacolnames <- setdiff(tcgacolnames, colnames(countmatrixNigerian))
countmatrixTCGA <- norm_countmatrix[ , tcgacolnames]
plot(density(countmatrixTCGA[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - TCGA")
for(i in 1:84){
lines(density(countmatrixTCGA[,i]),lwd=3);
#  print(colnames(countmatrix)[i])
#  invisible(readline(prompt=i))
} #This demonstrates the result of the normalized TCGA counts separately
norm_countmatrix <- as.data.frame(norm_countmatrix)
t_norm_countmatrix <- t(norm_countmatrix)
t_norm_countmatrix <- cbind (t_norm_countmatrix, sampleTable) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
designNvsWHER2 <- design
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="TCGA_white.Her2", 0, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition=="Nigerian.Her2", 1, as.character(designNvsWHER2$sampleCondition))
designNvsWHER2$sampleCondition <- ifelse (designNvsWHER2$sampleCondition==0 | designNvsWHER2$sampleCondition==1, designNvsWHER2$sampleCondition, NA)
designNvsWHER2 <- designNvsWHER2 %>% subset(is.na(sampleCondition)==FALSE)
designNvsWHER2$TCGA_white.Her2 <- ifelse (designNvsWHER2$sampleCondition==0, 1, 0)
designNvsWHER2$Nigerian.Her2 <- ifelse (designNvsWHER2$sampleCondition==1, 1, 0)
designNvsWHER2$sampleCondition <- NULL
mm <- model.matrix(~0+designNvsWHER2$TCGA_white.Her2+designNvsWHER2$Nigerian.Her2)
quantids <- rownames(designNvsWHER2)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_white", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
v=voom(d,designNvsWHER2,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_white.Her2-Nigerian.Her2, levels=colnames(designNvsWHER2))
fit <- lmFit(v, designNvsWHER2)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between Her2+ breast cancers in Nigerian and TCGA white patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between Her2+ \nbreast cancers in Nigerian and TCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
