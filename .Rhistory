quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
drop10 <- which(d$genes$symbol=="RPS18")
d <- d[-drop10,]
drop11 <- which(d$genes$symbol=="RPL9")
d <- d[-drop11,]
drop12 <- which(d$genes$symbol=="RPS9")
d <- d[-drop12,]
drop13 <- which(d$genes$symbol=="RPL34")
d <- d[-drop13,]
drop14 <- which(d$genes$symbol=="RPL41")
d <- d[-drop14,]
drop15 <- which(d$genes$symbol=="HBB")
d <- d[-drop15,]
drop16 <- which(d$genes$symbol=="HBA2")
d <- d[-drop16,]
v=voom(d,designNvsBHR,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_black.LumA-Nigerian.LumA, levels=colnames(designNvsBHR))
fit <- lmFit(v, designNvsBHR)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between LumA breast cancers in Nigerian and TCGA black patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between LumA \nbreast cancers in Nigerian and TCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
fit$genes$status <- ifelse(fit$F.p.value<0.05,"red","black")
limma::plotMA(fit, xlab = "Average log-expression",
ylab = "Expression log-ratio (this sample vs others)", status=fit$genes$status,
main = "MA Plot of differential gene expression between LumA \nbreast cancers in Nigerian and TCGA white breast cancer patients")
vismatrix <- d$counts
vismatrix <- t(vismatrix)
vismatrix <- as.data.frame(vismatrix)
vismatrix$sampleName <- rownames(vismatrix)
mergeids <- t_norm_countmatrix %>% dplyr::select(sampleName, sampleCondition)
vismatrix <- merge.data.frame(vismatrix, mergeids, all.x=TRUE, all.y=FALSE)
designNvsBHR.pca <- prcomp(vismatrix[,2:13516])
View(designNvsBHR)
designNvsBHR_white.pca <- prcomp(vismatrix[1:4,2:13516])
designNvsBHR_Nigerian.pca <- prcomp(vismatrix[5:18,2:13516])
22-19
22-9
designNvsBHR.pca <- prcomp(vismatrix[,2:13516])
designNvsBHR_white.pca <- prcomp(vismatrix[1:4,2:13516])
designNvsBHR_Nigerian.pca <- prcomp(vismatrix[5:18,2:13516])
autoplot(designNvsBHR.pca, data=vismatrix, colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - TCGA black LumA patients, ribosomes+HBB removed")
autoplot(designNvsBHR_white.pca, data=vismatrix[1:4,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - TCGA black LumA, ribosomes removed")
autoplot(designNvsBHR_Nigerian.pca, data=vismatrix[5:18,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - Nigerian LumA, ribosomes removed")
heatmapmatrix <- (t(vismatrix))
colnames(heatmapmatrix) <- heatmapmatrix[1,]
heatmapmatrix <- heatmapmatrix[-1,]
heatmapmatrix <- heatmapmatrix[1:13515,]
class(heatmapmatrix) <- "numeric"
heatmapmatrix <- as.data.frame(heatmapmatrix)
topVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=TRUE), ], 50)
topVarGeneslim <- as.character(topVarGenes$anno$GeneID)
bottomVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=FALSE), ], 50)
bottomVarGeneslim <- as.character(bottomVarGenes$anno$GeneID)
hm <- subset (heatmapmatrix, rownames(heatmapmatrix) %in% topVarGeneslim |  rownames(heatmapmatrix) %in% bottomVarGeneslim)
hm <- as.matrix(hm)
hm <- hm - rowMeans(hm)
annohm <- as.data.frame(colData(ddsHTSeqMF)[, c("condition1", "batch")])
colnames(annohm) <- c("Ethnicity", "Batch")
rownames(annohm) <- colnames(ddsHTSeqMF)
pheatmap(hm, annotation_col = annohm, cluster_rows=TRUE, cluster_cols=TRUE, clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", clustering_method = "complete", show_rownames=TRUE, show_colnames = FALSE, main="Heat map: DE genes in LumA breast cancer patients\nquantile normalization + ribosomes+HBB removed")
designNvsWHR <- design
designNvsWHR$sampleCondition <- ifelse (designNvsWHR$sampleCondition=="TCGA_white.LumB", 0, as.character(designNvsWHR$sampleCondition))
designNvsWHR$sampleCondition <- ifelse (designNvsWHR$sampleCondition=="Nigerian.LumB", 1, as.character(designNvsWHR$sampleCondition))
designNvsWHR$sampleCondition <- ifelse (designNvsWHR$sampleCondition==0 | designNvsWHR$sampleCondition==1, designNvsWHR$sampleCondition, NA)
designNvsWHR <- designNvsWHR %>% subset(is.na(sampleCondition)==FALSE)
designNvsWHR$TCGA_white.LumB <- ifelse (designNvsWHR$sampleCondition==0, 1, 0)
designNvsWHR$Nigerian.LumB <- ifelse (designNvsWHR$sampleCondition==1, 1, 0)
designNvsWHR$sampleCondition <- NULL
mm <- model.matrix(~0+designNvsWHR$TCGA_white.LumB+designNvsWHR$Nigerian.LumB)
quantids <- rownames(designNvsWHR)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_white", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
drop10 <- which(d$genes$symbol=="RPS18")
d <- d[-drop10,]
drop11 <- which(d$genes$symbol=="RPL9")
d <- d[-drop11,]
drop12 <- which(d$genes$symbol=="RPS9")
d <- d[-drop12,]
drop13 <- which(d$genes$symbol=="RPL34")
d <- d[-drop13,]
drop14 <- which(d$genes$symbol=="RPL41")
d <- d[-drop14,]
drop15 <- which(d$genes$symbol=="HBB")
d <- d[-drop15,]
drop16 <- which(d$genes$symbol=="HBA2")
d <- d[-drop16,]
v=voom(d,designNvsWHR,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_white.LumB-Nigerian.LumB, levels=colnames(designNvsWHR))
fit <- lmFit(v, designNvsWHR)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between LumB breast cancers in Nigerian and TCGA white patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between LumB \nbreast cancers in Nigerian and TCGA white breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
vismatrix <- d$counts
vismatrix <- t(vismatrix)
vismatrix <- as.data.frame(vismatrix)
vismatrix$sampleName <- rownames(vismatrix)
mergeids <- t_norm_countmatrix %>% dplyr::select(sampleName, sampleCondition)
vismatrix <- merge.data.frame(vismatrix, mergeids, all.x=TRUE, all.y=FALSE)
designNvsWHR2.pca <- prcomp(vismatrix[,2:13069])
designNvsWHR2.pca <- prcomp(vismatrix[,2:13068])
View(designNvsWHR)
designNvsWHR2.pca <- prcomp(vismatrix[,2:13068])
designNvsWHR2_white.pca <- prcomp(vismatrix[1:9,2:13068])
designNvsWHR2_Nigerian.pca <- prcomp(vismatrix[11:20,2:13068])
autoplot(designNvsWHR2.pca, data=vismatrix, colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - All LumB, ribosomes+HBB removed")
autoplot(designNvsWHR2_white.pca, data=vismatrix[1:9,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - TCGA white LumB, ribosomes removed")
autoplot(designNvsWHR2_Nigerian.pca, data=vismatrix[11:20,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - Nigerian LumB, ribosomes removed")
heatmapmatrix <- (t(vismatrix))
colnames(heatmapmatrix) <- heatmapmatrix[1,]
heatmapmatrix <- heatmapmatrix[-1,]
heatmapmatrix <- heatmapmatrix[1:13067,]
class(heatmapmatrix) <- "numeric"
heatmapmatrix <- as.data.frame(heatmapmatrix)
topVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=TRUE), ], 50)
topVarGeneslim <- as.character(topVarGenes$anno$GeneID)
bottomVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=FALSE), ], 50)
bottomVarGeneslim <- as.character(bottomVarGenes$anno$GeneID)
hm <- subset (heatmapmatrix, rownames(heatmapmatrix) %in% topVarGeneslim |  rownames(heatmapmatrix) %in% bottomVarGeneslim)
hm <- as.matrix(hm)
hm <- hm - rowMeans(hm)
annohm <- as.data.frame(colData(ddsHTSeqMF)[, c("condition1", "batch")])
colnames(annohm) <- c("Ethnicity", "Batch")
rownames(annohm) <- colnames(ddsHTSeqMF)
pheatmap(hm, annotation_col = annohm, cluster_rows=TRUE, cluster_cols=TRUE, clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", clustering_method = "complete", show_rownames=TRUE, show_colnames = FALSE, main="Heat map: DE genes in TCGA-white/Nigerian LumB breast cancer patients\nquantile normalization + ribosomes+HBB removed")
designNvsBHR <- design
designNvsBHR$sampleCondition <- ifelse (designNvsBHR$sampleCondition=="TCGA_black.LumB", 0, as.character(designNvsBHR$sampleCondition))
designNvsBHR$sampleCondition <- ifelse (designNvsBHR$sampleCondition=="Nigerian.LumB", 1, as.character(designNvsBHR$sampleCondition))
designNvsBHR$sampleCondition <- ifelse (designNvsBHR$sampleCondition==0 | designNvsBHR$sampleCondition==1, designNvsBHR$sampleCondition, NA)
designNvsBHR <- designNvsBHR %>% subset(is.na(sampleCondition)==FALSE)
designNvsBHR$TCGA_black.LumB <- ifelse (designNvsBHR$sampleCondition==0, 1, 0)
designNvsBHR$Nigerian.LumB <- ifelse (designNvsBHR$sampleCondition==1, 1, 0)
designNvsBHR$sampleCondition <- NULL
mm <- model.matrix(~0+designNvsBHR$TCGA_black.LumB+designNvsBHR$Nigerian.LumB)
quantids <- rownames(designNvsBHR)
rownames(mm) <- quantids
colnames(mm) <- c("TCGA_black", "Nigerian")
quantdata <- as.data.frame(t(counts(ddsHTSeqMF)))
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
d0 <- DGEList(counts=quantdata, genes=annotation)
cutoff <- 10
drop <- which(apply(cpm(d0), 1, max) < cutoff)
d <- d0[-drop,]
dim(d) # Number of genes after taking out low expressed genes
drop2 <- which(d$genes$symbol=="RPS25")
d <- d[-drop2,]
drop3 <- which(d$genes$symbol=="RPL18A")
d <- d[-drop3,]
drop4 <- which(d$genes$symbol=="RPL7")
d <- d[-drop4,]
drop5 <- which(d$genes$symbol=="RPL21")
d <- d[-drop5,]
drop6 <- which(d$genes$symbol=="RPS3A")
d <- d[-drop6,]
drop7 <- which(d$genes$symbol=="RPL39")
d <- d[-drop7,]
drop8 <- which(d$genes$symbol=="RPL7A")
d <- d[-drop8,]
drop9 <- which(d$genes$symbol=="RPL10")
d <- d[-drop9,]
drop10 <- which(d$genes$symbol=="RPS18")
d <- d[-drop10,]
drop11 <- which(d$genes$symbol=="RPL9")
d <- d[-drop11,]
drop12 <- which(d$genes$symbol=="RPS9")
d <- d[-drop12,]
drop13 <- which(d$genes$symbol=="RPL34")
d <- d[-drop13,]
drop14 <- which(d$genes$symbol=="RPL41")
d <- d[-drop14,]
drop15 <- which(d$genes$symbol=="HBB")
d <- d[-drop15,]
drop16 <- which(d$genes$symbol=="HBA2")
d <- d[-drop16,]
v=voom(d,designNvsBHR,plot=T, normalize="quantile")
contr.matrix <- makeContrasts(TCGA_black.LumB-Nigerian.LumB, levels=colnames(designNvsBHR))
fit <- lmFit(v, designNvsBHR)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
hist(fit$p.value, ylim=c(0,3000), main="Histogram of unadjusted p-values of differential gene expression\n between LumB breast cancers in Nigerian and TCGA black patients\n quantile corrected")
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
anno = fit$genes)
with(df_limma, plot(log2FoldChange, -log10(padj), pch=20, main="Volcano plot of differential gene expression between LumB \nbreast cancers in Nigerian and TCGA black breast cancer patients\nquantile corrected", xlim=c(-50,50), ylim=c(0,20)))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), points(log2FoldChange, -log10(padj), pch=20, col="blue"))
with(subset(df_limma, padj<0.05 & (2^(abs(log2FoldChange))>50)), textxy(log2FoldChange, -log10(padj), labs=anno$symbol, cex=.5))
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldChange <- NA
row.pos <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange >= 0)
row.neg <- which(! is.na(df_limmaprint$log2FoldChange) &
df_limmaprint$log2FoldChange < 0)
df_limmaprint$foldChange[row.pos] <- 2^df_limmaprint$log2FoldChange[row.pos]
df_limmaprint$foldChange[row.neg] <- -2^((-1) * df_limmaprint$log2FoldChange[row.neg])
df_limmaprint <- df_limmaprint %>% arrange(foldChange) %>% dplyr::filter(padj < 0.05) %>% dplyr::filter(abs(foldChange)>1.5)
top_n(df_limmaprint, 10, foldChange)
top_n(df_limmaprint, -10, foldChange)
fit$genes$status <- ifelse(fit$F.p.value<0.05,"red","black")
limma::plotMA(fit, xlab = "Average log-expression",
ylab = "Expression log-ratio (this sample vs others)", status=fit$genes$status,
main = "MA Plot of differential gene expression between LumB \nbreast cancers in Nigerian and TCGA black breast cancer patients")
vismatrix <- d$counts
vismatrix <- t(vismatrix)
vismatrix <- as.data.frame(vismatrix)
vismatrix$sampleName <- rownames(vismatrix)
mergeids <- t_norm_countmatrix %>% dplyr::select(sampleName, sampleCondition)
vismatrix <- merge.data.frame(vismatrix, mergeids, all.x=TRUE, all.y=FALSE)
View(designNvsBHR)
designNvsBHR2.pca <- prcomp(vismatrix[,2:12979])
designNvsBHR2_black.pca <- prcomp(vismatrix[1:4,2:12979])
designNvsBHR2_Nigerian.pca <- prcomp(vismatrix[5:15,2:12979])
autoplot(designNvsBHR2.pca, data=vismatrix, colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - LumB, ribosomes+HBB removed")
autoplot(designNvsBHR2_black.pca, data=vismatrix[1:4,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - TCGA black LumB, ribosomes removed")
autoplot(designNvsBHR2_Nigerian.pca, data=vismatrix[5:15,], colour='sampleCondition', main="PCA of quantile normalization results BEFORE DE analysis - Nigerian LumB, ribosomes removed")
heatmapmatrix <- (t(vismatrix))
colnames(heatmapmatrix) <- heatmapmatrix[1,]
heatmapmatrix <- heatmapmatrix[-1,]
heatmapmatrix <- heatmapmatrix[1:12978,]
class(heatmapmatrix) <- "numeric"
heatmapmatrix <- as.data.frame(heatmapmatrix)
topVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=TRUE), ], 50)
topVarGeneslim <- as.character(topVarGenes$anno$GeneID)
bottomVarGenes <- head(df_limmaprint[order(df_limmaprint$foldChange, decreasing=FALSE), ], 50)
bottomVarGeneslim <- as.character(bottomVarGenes$anno$GeneID)
hm <- subset (heatmapmatrix, rownames(heatmapmatrix) %in% topVarGeneslim |  rownames(heatmapmatrix) %in% bottomVarGeneslim)
hm <- as.matrix(hm)
hm <- hm - rowMeans(hm)
annohm <- as.data.frame(colData(ddsHTSeqMF)[, c("condition1", "batch")])
colnames(annohm) <- c("Ethnicity", "Batch")
rownames(annohm) <- colnames(ddsHTSeqMF)
pheatmap(hm, annotation_col = annohm, cluster_rows=TRUE, cluster_cols=TRUE, clustering_distance_rows = "euclidean", clustering_distance_cols = "euclidean", clustering_method = "complete", show_rownames=TRUE, show_colnames = FALSE, main="Heat map: DE genes in TCGA black/Nigerian LumB breast cancer patients\nquantile normalization + ribosomes+HBB removed")
FOLDER <- "/Users/parajago/Research-Local/2019-rnaseq/Inputs/NigerianTCGA_quants-proteincoding"
sampleFiles <- grep("htseq.counts",list.files(FOLDER),value=TRUE)
#Differential gene expression setup based on race (b/w/other)
sampleConditionrace <- sampleFiles
countVar2=1
for (sample in sampleConditionrace){
if (stri_detect_fixed(sample,"LIB")==TRUE){
sampleConditionrace[countVar2] <- "Nigerian"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"black")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_black"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"white")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_white"
countVar2=countVar2+1
} else{
sampleConditionrace[countVar2] <- "TCGA_other"
countVar2=countVar2+1
}
}
#Condition based on PAM50 subtype
sampleConditionPAM50 <- sampleFiles
countVar2=1
for (sample in sampleConditionPAM50){
if (stri_detect_fixed(sample,"Her2")==TRUE){
sampleConditionPAM50[countVar2] <- "Her2"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"Basal")==TRUE){
sampleConditionPAM50[countVar2] <- "Basal"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumA")==TRUE){
sampleConditionPAM50[countVar2] <- "LumA"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumB")==TRUE){
sampleConditionPAM50[countVar2] <- "LumB"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"PAMNL")==TRUE){
sampleConditionPAM50[countVar2] <- "Normal"
countVar2=countVar2+1
} else{
sampleConditionPAM50[countVar2] <- "PAM_other"
countVar2=countVar2+1
}
}
#Condition based on batch (relevant to the Nigerian patients only; no difference in batch for the TCGA patients)
batchval <- sampleFiles
countVar2=1
for (sample in batchval){
if (stri_detect_fixed(sample,"batch1")==TRUE){
batchval[countVar2] <- "batch1"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch23")==TRUE){
batchval[countVar2] <- "batch23"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch4")==TRUE){
batchval[countVar2] <- "batch4"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch5")==TRUE){
batchval[countVar2] <- "batch5"
countVar2=countVar2+1
} else{
batchval[countVar2] <- "batchT"
countVar2=countVar2+1
}
}
table(sampleConditionrace, sampleConditionPAM50)
sampleTable <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
batch=batchval)
sampleTable$sampleCondition <- paste(sampleTable$condition1, sampleTable$condition2, sep=".")
ddsHTSeqMF <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable,
directory=FOLDER,
design=~sampleCondition)
ddsHTSeqMF <- ddsHTSeqMF[rowSums(counts(ddsHTSeqMF)) > 0, ] #Pre-filtering the dataset by removing the rows without any information about gene expression -> this removes 603 genes
countmatrix <- assay(ddsHTSeqMF) #Raw counts organized into matrix format from individual files
countmatrix2 <- log2(countmatrix + 1) #Basic transformation of the count data
plot(density(countmatrix2[,1]),lwd=3,ylim=c(0,.30), main="Density of counts with log2[count]+1 transformation ONLY")
for(i in 1:180){lines(density(countmatrix2[,i]),lwd=3)} #This demonstrates that there is a difference in distributions between the Nigerian and TCGA data with basic log transformation normalization
norm_countmatrix <- as.matrix(countmatrix2)
norm_countmatrix = normalize.quantiles(norm_countmatrix)
plot(density(norm_countmatrix[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization")
for(i in 1:180){lines(density(norm_countmatrix[,i]),lwd=3)} #This demonstrates the effect of comparative quantile normalization
colnames (norm_countmatrix) <- colnames (countmatrix2)
rownames (norm_countmatrix) <- rownames (countmatrix2)
norm_countmatrix <- as.data.frame(norm_countmatrix)
countmatrixNigerian <- dplyr::select(norm_countmatrix, contains("LIB"))
plot(density(countmatrixNigerian[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - Nigerian")
for(i in 1:96){lines(density(countmatrixNigerian[,i]),lwd=3)} #This demonstrates the result of the normalized Nigerian counts separately
tcgacolnames <- colnames(countmatrix)
tcgacolnames <- setdiff(tcgacolnames, colnames(countmatrixNigerian))
countmatrixTCGA <- norm_countmatrix[ , tcgacolnames]
plot(density(countmatrixTCGA[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - TCGA")
for(i in 1:84){
lines(density(countmatrixTCGA[,i]),lwd=3);
#  print(colnames(countmatrix)[i])
#  invisible(readline(prompt=i))
} #This demonstrates the result of the normalized TCGA counts separately
norm_countmatrix <- as.data.frame(norm_countmatrix)
t_norm_countmatrix <- t(norm_countmatrix)
t_norm_countmatrix <- cbind (t_norm_countmatrix, sampleTable) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
quant.pca <- prcomp(t_norm_countmatrix[,1:19724])
autoplot(quant.pca, data=t_norm_countmatrix, colour='sampleCondition', shape='condition1', main="PCA of quantile normalization results prior to DE analysis")
countmatrixNigerian.test <- countmatrixNigerian
Nigeriancounts <- as.data.frame(rowSums(countmatrixNigerian.test))
names(Nigeriancounts) <- c("sum")
Nigeriancounts$mean <- rowMeans(countmatrixNigerian.test)
Nigeriancounts$tfx <- log(Nigeriancounts$mean)+1
Nigeriancounts$gene <- rownames(Nigeriancounts)
countmatrixTCGA.test <- countmatrixTCGA
TCGAcounts <- as.data.frame(rowSums(countmatrixTCGA.test))
names(TCGAcounts) <- c("sum")
TCGAcounts$mean <- rowMeans(countmatrixTCGA.test)
TCGAcounts$tfx <- log(TCGAcounts$mean)+1
TCGAcounts$gene <- rownames(TCGAcounts)
ggplot(data=TCGAcounts, aes(tfx)) +
geom_histogram()
ggplot(data=Nigeriancounts, aes(tfx)) +
geom_histogram()
jointcounts <- merge(Nigeriancounts,TCGAcounts, by="gene")
corr <- cor.test(x=jointcounts$mean.x, y=jointcounts$mean.y, method = 'spearman')
View(t_norm_countmatrix)
View(norm_countmatrix)
View(t_norm_countmatrix)
outcomecounts <- t(t_norm_countmatrix)
View(outcomecounts)
outcomecounts <- as.data.frame(t(t_norm_countmatrix))
View(outcomecounts)
outcomes <- rowVars(outcomecounts[,1:19724])
outcomes <- rowVars(outcomecounts[1:19724,])
outcomes <- rowVars(outcomecounts[1:19723,])
class(outcomecounts[1:19723,]) <- "numeric"
outcomecounts <- as.double(t(t_norm_countmatrix))
outcomecounts <- as.data.frame(t(t_norm_countmatrix))
outcomecounts <- norm_countmatrix
View(outcomecounts)
outcomecounts <- t_norm_countmatrix
View(outcomecounts)
View(outcomecounts)
outcomecounts <- as.data.frame(t(t_norm_countmatrix))
View(outcomecounts)
outcomecounts <- as.data.frame(t(t_norm_countmatrix))
outcomecounts$means <- rowMeans(outcomecounts[1:19724,])
outcomecounts$means <- rowMeans(outcomecounts[1:19723,])
outcomecounts <- as.numeric(outcomecounts[1:19723,])
View(jointcounts)
View(Nigeriancounts)
Nigeriancounts$group <- "Nigerian"
TCGAcounts$group <- "TCGA"
jointcounts2 <- merge(Nigeriancounts,TCGAcounts, by="gene")
View(jointcounts2)
View(countmatrixNigerian)
View(t_norm_countmatrix)
View(norm_countmatrix)
outcomecounts <- t_norm_countmatrix
View(outcomecounts)
outcomecounts[1,1]
type(outcomecounts[1,1])
class(outcomecounts[1,1])
outcomecounts$meancounts <- rowMeans(outcomecounts[, c(1:19724)])
summary(outcomecounts$meancounts)
outcomecounts$varcounts <- rowVars(outcomecounts[, c(1:19724)])
summary(outcomecounts$varcounts)
outcomecounts$sumcounts <- rowSums(outcomecounts[, c(1:19724)])
summary(outcomecounts$sumcounts)
View(outcomecounts)
colnames(outcomecounts[,19724:19733])
outcomecounts_f <- outcomecounts %>% select("sampleName", "condition1", "condition2", "meancounts", "varcounts", "sumcounts")
outcomecounts_f <- outcomecounts %>% select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts)
outcomecounts_f <- outcomecounts %>% select(outcomecounts, "sampleName", "condition1", "condition2", "meancounts", "varcounts", "sumcounts")
outcomecounts_f <- outcomecounts %>% select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts)
outcomecounts_f <- outcomecounts %>% dplyr::select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts)
View(outcomecounts_f)
outcomecounts_f <- outcomecounts %>% dplyr::select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts) %>% filter (condition1 != "TCGAother") filter(condition2="PAM_other")
outcomecounts_f <- outcomecounts %>% dplyr::select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts) %>% filter (condition1 != "TCGAother" | condition2 != "PAM_other")
outcomecounts_f <- outcomecounts %>% dplyr::select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts) %>% dplyr::filter (condition1 != "TCGAother" | condition2 != "PAM_other")
View(outcomecounts_f)
outcomecounts_f <- outcomecounts %>% dplyr::select(sampleName, condition1, condition2, meancounts, varcounts, sumcounts) %>% dplyr::filter (condition1 != "TCGA_other" & condition2 != "PAM_other")
batchassess <- glm(meancounts~condition1+condition2+condition1*condition2, family="bionomial", data=outcomecounts_f)
batchassess <- glm(meancounts~condition1+condition2+condition1*condition2, family="binomial", data=outcomecounts_f)
batchassess <- glm(meancounts~condition1+condition2+condition1*condition2, data=outcomecounts_f)
View(batchassess)
summary(batchassess)
rm(batchassess)
meanassess <- glm(meancounts~condition1+condition2+condition1*condition2, data=outcomecounts_f)
varassess <- glm(varcounts~condition1+condition2+condition1*condition2, data=outcomecounts_f)
summary(varassess)
sumassess <- glm(sumcounts~condition1+condition2+condition1*condition2, data=outcomecounts_f)
summary(sumassess)
