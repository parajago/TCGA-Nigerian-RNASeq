plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
set1pca <- betweenLaneNormalization(set1$normalizedCounts, which="upper")
set1pca <-as.data.frame(set1pca)
plotRLE(counts(ddsHTSeqMF), outline=FALSE, ylim=c(-4, 4))
plotRLE(set1$normalizedCounts, outline=FALSE, ylim=c(-4, 4))
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
set1pca <-set1$normalizedCounts
set1pca <- betweenLaneNormalization(set1pca, which="upper")
set1pca <-as.data.frame(set1pca)
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
set1pca <- betweenLaneNormalization(set1, which="upper")
set1pca <- betweenLaneNormalization(set1$normalizedCounts, which="upper")
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
t_set1pca <- as.data.frame(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
set1pca <- EDASeq::betweenLaneNormalization(set1$normalizedCounts, which="upper")
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
t_set1pca <- as.data.frame(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
set1pca <- EDASeq::betweenLaneNormalization(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
t_set1pca <- as.data.frame(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
autoplot(ruv.pca, data=t_set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
colnames(set1$normalizedCounts)
genenames <- c("ENSG00000150991.10", "ENSG00000134644.11", "ENSG00000107771.11", "ENSG00000125755.14")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
pdata(set1)
pData(set1)
set1pca <- set1$normalizedCounts
View(set1pca)
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
View(t_set1pca)
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
t_set1pca <- cbind (t_set1pca, sampleTable2$sampleCondition) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
View(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
t_set1pca <- as.data.frame(t_set1pca)
ruv.pca <- prcomp(t_set1pca[,1:19745])
set1pca <- as.data.frame(set1$normalizedCounts)
t_set1pca <- t(set1pca)
plotPCA(t_set1pca)
plotPCA(set1pca)
set1pca <- set1$normalizedCounts
plotPCA(set1pca)
plotPCA(set1pca, pch=0.2)
rownames(set1pca)
colnames(set1pca)
colnames(set1pca) <- sampleFiles2$sampleCondition
colnames(set1pca) <- sampleTable2$sampleCondition
plotPCA(set1pca)
plotPCA(set1pca) + geom_label(aes(label = "PCA of RUV normalization"))
view(counts(ddsHTSeqMF))
View(counts(ddsHTSeqMF))
vsd <- vst(ddsHTSeqMF, blind=FALSE) #Variance-stabilizing transformation, only using this since >50 samples
View(vsd)
vsd$assays
vsd[data()]
vsd
vsd(assays(1))
set1pca <- set1$normalizedCounts
View(set1pca)
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
set1pca <- set1$normalizedCounts
colnames(set1pca) <- sampleTable2$sampleCondition
ruv.pca <- prcomp(set1pca)
autoplot(ruv.pca, data=set1pca, colour='sampleCondition', main="PCA of RUV normalization results prior to DE analysis")
plotPCA(set1pca)
plotPCA(set1pca, intgroup="Nigerian.Basal")
plotPCA(set1pca, main="PCA of RUV normalization results prior to DE analysis")
install.packages("ComplexHeatmap")
resBasal2
library(gplots)
library(ggbiplot)
library(ggplot2)
library(edgeR)
library("DESeq2")
library("RUVSeq")
library(vsn)
library("genefilter")
library(pheatmap)
library(clusterProfiler)
library(pathview)
library("AnnotationDbi")
library(checkmate)
library(affy)
library("dplyr")
library(stringi)
library("hexbin")
library("org.Hs.eg.db")
library('GenomicFeatures')
library(EnsDb.Hsapiens.v75)
library("sva")
library(limma)
library(calibrate)
library(ggfortify)
library("ashr")
library(preprocessCore)
library("BiocParallel")
library(RColorBrewer)
library(Glimma)
register(MulticoreParam(4))
setwd("~/Research-Local/RNAseq-Local/Inputs/NigerianTCGA_quants-proteincoding")
FOLDER <- "/Users/parajago/Research-Local/RNAseq-Local/Inputs/NigerianTCGA_quants-proteincoding"
sampleFiles <- grep("htseq.counts",list.files(FOLDER),value=TRUE)
#Differential gene expression setup based on race (b/w/other)
sampleConditionrace <- sampleFiles
countVar2=1
for (sample in sampleConditionrace){
if (stri_detect_fixed(sample,"LIB")==TRUE){
sampleConditionrace[countVar2] <- "Nigerian"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"black")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_black"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"white")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_white"
countVar2=countVar2+1
} else{
sampleConditionrace[countVar2] <- "TCGA_other"
countVar2=countVar2+1
}
}
#Condition based on PAM50 subtype
sampleConditionPAM50 <- sampleFiles
countVar2=1
for (sample in sampleConditionPAM50){
if (stri_detect_fixed(sample,"Her2")==TRUE){
sampleConditionPAM50[countVar2] <- "Her2"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"Basal")==TRUE){
sampleConditionPAM50[countVar2] <- "Basal"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumA")==TRUE){
sampleConditionPAM50[countVar2] <- "LumA"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumB")==TRUE){
sampleConditionPAM50[countVar2] <- "LumB"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"PAMNL")==TRUE){
sampleConditionPAM50[countVar2] <- "Normal"
countVar2=countVar2+1
} else{
sampleConditionPAM50[countVar2] <- "PAM_other"
countVar2=countVar2+1
}
}
#Condition based on batch (relevant to the Nigerian patients only; no difference in batch for the TCGA patients)
batchval <- sampleFiles
countVar2=1
for (sample in batchval){
if (stri_detect_fixed(sample,"batch1")==TRUE){
batchval[countVar2] <- "batch1"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch23")==TRUE){
batchval[countVar2] <- "batch23"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch4")==TRUE){
batchval[countVar2] <- "batch4"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch5")==TRUE){
batchval[countVar2] <- "batch5"
countVar2=countVar2+1
} else{
batchval[countVar2] <- "batchT"
countVar2=countVar2+1
}
}
table(sampleConditionrace, sampleConditionPAM50)
sampleTable2 <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
batch=batchval)
sampleTable2$sampleCondition <- paste(sampleTable2$condition1, sampleTable2$condition2, sep=".")
ddsHTSeqMF <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable2,
directory=FOLDER,
design=~sampleCondition)
ddsHTSeqMF <- ddsHTSeqMF[rowSums(counts(ddsHTSeqMF)) > 0, ] #Pre-filtering the dataset by removing the rows without information about gene expression
ddsHTSeqMF$sampleCondition <- relevel(ddsHTSeqMF$sampleCondition, ref = "Nigerian.Basal") #explicitly making the Nigerian Basal patients the reference population
FOLDER <- "/Users/parajago/Research-Local/RNAseq-Local/Inputs/NigerianTCGA_quants-proteincoding"
sampleFiles <- grep("htseq.counts",list.files(FOLDER),value=TRUE)
#Differential gene expression setup based on race (b/w/other)
sampleConditionrace <- sampleFiles
countVar2=1
for (sample in sampleConditionrace){
if (stri_detect_fixed(sample,"LIB")==TRUE){
sampleConditionrace[countVar2] <- "Nigerian"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"black")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_black"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"white")==TRUE){
sampleConditionrace[countVar2] <- "TCGA_white"
countVar2=countVar2+1
} else{
sampleConditionrace[countVar2] <- "TCGA_other"
countVar2=countVar2+1
}
}
#Condition based on PAM50 subtype
sampleConditionPAM50 <- sampleFiles
countVar2=1
for (sample in sampleConditionPAM50){
if (stri_detect_fixed(sample,"Her2")==TRUE){
sampleConditionPAM50[countVar2] <- "Her2"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"Basal")==TRUE){
sampleConditionPAM50[countVar2] <- "Basal"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumA")==TRUE){
sampleConditionPAM50[countVar2] <- "LumA"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"LumB")==TRUE){
sampleConditionPAM50[countVar2] <- "LumB"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"PAMNL")==TRUE){
sampleConditionPAM50[countVar2] <- "Normal"
countVar2=countVar2+1
} else{
sampleConditionPAM50[countVar2] <- "PAM_other"
countVar2=countVar2+1
}
}
#Condition based on batch (relevant to the Nigerian patients only; no difference in batch for the TCGA patients)
batchval <- sampleFiles
countVar2=1
for (sample in batchval){
if (stri_detect_fixed(sample,"batch1")==TRUE){
batchval[countVar2] <- "batch1"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch23")==TRUE){
batchval[countVar2] <- "batch23"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch4")==TRUE){
batchval[countVar2] <- "batch4"
countVar2=countVar2+1
} else if (stri_detect_fixed(sample,"batch5")==TRUE){
batchval[countVar2] <- "batch5"
countVar2=countVar2+1
} else{
batchval[countVar2] <- "batchT"
countVar2=countVar2+1
}
}
table(sampleConditionrace, sampleConditionPAM50)
sampleTable2 <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
batch=batchval)
sampleTable2$sampleCondition <- paste(sampleTable2$condition1, sampleTable2$condition2, sep=".")
ddsHTSeqMF <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTable2,
directory=FOLDER,
design=~sampleCondition)
ddsHTSeqMF <- ddsHTSeqMF[rowSums(counts(ddsHTSeqMF)) > 0, ] #Pre-filtering the dataset by removing the rows without information about gene expression
ddsHTSeqMF$sampleCondition <- relevel(ddsHTSeqMF$sampleCondition, ref = "Nigerian.Basal") #explicitly making the Nigerian Basal patients the reference population
dds <- estimateSizeFactors(ddsHTSeqMF) #The size factor is the median ratio of the sample over a "pseudosample": for each gene, the geometric mean of all samples. This accounts for sequencing depth.
dat  <- counts(dds, normalized = TRUE)
idx  <- rowMeans(dat) > 1
dat  <- dat[idx, ]
mod  <- model.matrix(~condition1, colData(dds))
mod0 <- model.matrix(~   1, colData(dds))
svseq <- svaseq(dat, mod, mod0, n.sv = 1)
sampleTablebe <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
be1=svseq$sv[,1],
batch=batchval)
sampleTablebe$sampleCondition <- paste(sampleTablebe$condition1, sampleTablebe$condition2, sep=".")
ddsHTSeqMFbe <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTablebe,
directory=FOLDER,
design= ~be1+sampleCondition)
ddsHTSeqMFbe <- ddsHTSeqMFbe[rowSums(counts(ddsHTSeqMFbe)) > 0, ]
ddsHTSeqMFbe$sampleCondition <- relevel(ddsHTSeqMFbe$sampleCondition, ref = "Nigerian.Basal") #explicitly making the Nigerian Basal patients the reference population
ddsMFbe <-DESeq(ddsHTSeqMFbe)
#4 rows did not converge in beta, labelled in mcols(object)$betaConv
resBasal2<- results(ddsMFbe, contrast=c("sampleCondition", "Nigerian.Basal", "TCGA_white.Basal"), alpha=0.05)
nrow(resBasal2)
resBasal2 <- resBasal2[(resBasal2$log2FoldChange >= fc | resBasal2$log2FoldChange <= -fc),]
resBasal2 <- subset(resBasal2, padj < fdr)
nrow(resBasal2) #More genes are considered significant with the batch correction method
fc = 0.58 #Subsequent threshold of signifcance for log2 fold change -> 0.58 = log2(1.5)
fdr = 0.05 #Subsequent threshold of significance for p-value (adjusted by FDR)
resBasal2 <- resBasal2[(resBasal2$log2FoldChange >= fc | resBasal2$log2FoldChange <= -fc),]
resBasal2 <- subset(resBasal2, padj < fdr)
nrow(resBasal2) #More genes are considered significant with the batch correction method
resBasal2$temp <- row.names(resBasal2)
resBasal2$temp <- gsub("[.].+", "", resBasal2$temp)
resBasal2$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=resBasal2$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
View(resBasal2)
resBasal2print <- resBasal2 %>% select (log2FoldChange, padj, symbol)
resBasal2print <- as.data.frame(resBasal2)
View(resBasal2print)
resBasal2print <- resBasal2print %>% select (log2FoldChange, padj, symbol)
resBasal2printtop <- head(order(resBasal2print$log2FoldChange), decreasing = TRUE), 10)
resBasal2printtop <- head(order(resBasal2print$log2FoldChange, decreasing = TRUE), 10)
resBasal2print <- resBasal2print %>% select(log2FoldChange)
resBasal2print <- resBasal2print %>% filter(log2FoldChange, padj, symbol)
rm(resBasal2printtop)
head(resBasal2print, by(log2foldchange))
head(resBasal2print, by(log2FoldChange))
top_n(resBasal2print, 10, log2FoldChange)
top_n(resBasal2print, -10, log2FoldChange)
top_n(resBasal2print, 10, abs(log2FoldChange))
top_n(resBasal2print, -10, abs(log2FoldChange))
top_n(resBasal2print, -10, log2FoldChange)
resBasal2print <- order(resBasal2print$log2FoldChange, decreasing=TRUE)
resBasal2print <- as.data.frame(resBasal2)
resBasal2print <- arrange(resBasal2print, by.group="log2FoldChange")
resBasal2print <- arrange(log2FoldChange)
resBasal2print <- arrange(resBasal2print$log2FoldChange)
resBasal2print %>% arrange(log2FoldChange)
resBasal2print <- resBasal2print %>% arrange(log2FoldChange)
View(resBasal2print)
top_n(resBasal2print, 10, log2FoldChange)
top_n(resBasal2print, -10, log2FoldChange)
genenames <- c("ENSG00000150991.10", "ENSG00000134644.11", "ENSG00000107771.11", "ENSG00000125755.14")
set1 <- RUVg(counts(ddsHTSeqMF), genenames, k=1)
sampleTableRUV <- data.frame(sampleName=gsub(".htseq.counts","",sampleFiles),
fileName=sampleFiles,
condition1=sampleConditionrace,
condition2=sampleConditionPAM50,
W_1 = set1$W)
sampleTableRUV$sampleCondition <- paste(sampleTableRUV$condition1, sampleTableRUV$condition2, sep=".")
ddsHTSeqMFRUV <- DESeqDataSetFromHTSeqCount(sampleTable=sampleTableRUV,
directory=FOLDER,
design= ~W_1+sampleCondition)
ddsHTSeqMFRUV <- ddsHTSeqMFRUV[rowSums(counts(ddsHTSeqMFRUV)) > 0, ]
ddsHTSeqMFRUV$sampleCondition <- relevel(ddsHTSeqMFRUV$sampleCondition, ref = "Nigerian.Basal") #explicitly making the Nigerian Basal patients the reference population
ddsMFRUV <- DESeq(ddsHTSeqMFRUV) #Running differential expression with the two housekeeping genes for normalization
resBasal3<- results(ddsMFRUV, contrast=c("sampleCondition", "Nigerian.Basal", "TCGA_white.Basal"), alpha=0.05)
nrow(resBasal3)
resBasal3 <- resBasal3[(resBasal3$log2FoldChange >= fc | resBasal3$log2FoldChange <= -fc),]
resBasal3 <- subset(resBasal3, padj < fdr)
nrow(resBasal3)
resBasal3$temp <- row.names(resBasal3)
resBasal3$temp <- gsub("[.].+", "", resBasal3$temp)
resBasal3$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=resBasal3$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
resBasal3print <- as.data.frame(resBasal3)
resBasal3print <- resBasal3print %>% arrange(log2FoldChange)
top_n(resBasal3print, 10, log2FoldChange)
top_n(resBasal3print, -10, log2FoldChange)
countmatrix <- assay(ddsHTSeqMF) #Raw counts organized into matrix format from individual files
countmatrix2 <- log2(countmatrix + 1) #Basic transformation of the count data
countmatrix2 = countmatrix2 [rowMeans(countmatrix2) > 0, ] #Remove if there is no data re: counts
plot(density(countmatrix2[,1]),lwd=3,ylim=c(0,.30), main="Density of counts with log2[count]+1 transformation ONLY")
for(i in 1:185){lines(density(countmatrix2[,i]),lwd=3)} #This demonstrates that there is a difference in distributions between the Nigerian and TCGA data with basic log transformation normalization
norm_countmatrix <- as.matrix(countmatrix2)
norm_countmatrix = normalize.quantiles(norm_countmatrix)
plot(density(norm_countmatrix[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization")
for(i in 1:184){lines(density(norm_countmatrix[,i]),lwd=3)} #This demonstrates the effect of comparative quantile normalization
colnames (norm_countmatrix) <- colnames (countmatrix2)
rownames (norm_countmatrix) <- rownames (countmatrix2)
norm_countmatrix <- as.data.frame(norm_countmatrix)
countmatrixNigerian <- dplyr::select(norm_countmatrix, contains("LIB"))
plot(density(countmatrixNigerian[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - Nigerian")
for(i in 1:98){lines(density(countmatrixNigerian[,i]),lwd=3)} #This demonstrates the result of the normalized Nigerian counts separately
tcgacolnames <- colnames(countmatrix)
tcgacolnames <- setdiff(tcgacolnames, colnames(countmatrixNigerian))
countmatrixTCGA <- norm_countmatrix[ , tcgacolnames]
plot(density(countmatrixTCGA[,1]),lwd=3,ylim=c(0,.3), main="Density of counts with quantile normalization - TCGA")
for(i in 1:85){lines(density(countmatrixTCGA[,i]),lwd=3)} #This demonstrates the result of the normalized TCGA counts separately
norm_countmatrix <- as.data.frame(norm_countmatrix)
t_norm_countmatrix <- t(norm_countmatrix)
t_norm_countmatrix <- cbind (t_norm_countmatrix, sampleTable2) #This binds the characteristics of the original patients to the quantile normalized counts. CBinding was checked to make sure that patients were correctly aligned to characteristics.
design <- t_norm_countmatrix
design <- design %>% dplyr::select(sampleCondition)
design$sampleCondition <- ifelse (design$sampleCondition=="Nigerian.Basal", 0, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition=="TCGA_white.Basal", 1, as.character(design$sampleCondition))
design$sampleCondition <- ifelse (design$sampleCondition==0 | design$sampleCondition==1, design$sampleCondition, NA)
design <- design %>% subset(is.na(sampleCondition)==FALSE)
design$Nigerian.Basal <- ifelse (design$sampleCondition==0, 1, 0)
design$TCGA_white.Basal <- ifelse (design$sampleCondition==1, 1, 0)
design$sampleCondition <- NULL
quantids <- rownames(design)
design <- model.matrix(~0+design$Nigerian.Basal+design$TCGA_white.Basal)
rownames(design) <- quantids
colnames(design) <- c("Nigerian", "TCGA_white")
quantdata <- t(counts(ddsHTSeqMF))
quantdata <- as.data.frame(quantdata)
quantdata <- quantdata[quantids,]
quantdata <- t(quantdata)
quantdata <- quantdata[rowSums(quantdata) > 0, ]
contr.matrix <- makeContrasts( NigerianvsTCGA = Nigerian-TCGA_white, levels=colnames(design))
dge <- DGEList(counts=quantdata)
dge <- calcNormFactors(dge)
v=voom(dge,design,plot=T, normalize="quantile")
fit <- lmFit(v, design)
fit <- contrasts.fit(fit, contrasts=contr.matrix)
fit <- eBayes(fit)
dt <- decideTests(fit)
summary(dt)
qvals<-p.adjust(fit$p.value[,1], method='fdr')
df_limma <- data_frame(log2FoldChange = fit$coefficients[,1],
pval = fit$p.value[,1],
padj = qvals,
temp = gsub("[.].+", "", rownames(fit)))
df_limma$symbol <- mapIds(EnsDb.Hsapiens.v75,
keys=df_limma$temp,
column="SYMBOL",
keytype="GENEID",
multiVals="first")
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint <- df_limmaprint %>% arrange(log2FoldChange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
View(df_limmaprint)
View(fit)
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldchange <- (2^df_limmaprint$log2FoldChange)
df_limmaprint <- df_limmaprint %>% arrange(log2FoldChange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldchange <- (2^df_limmaprint$log2FoldChange)
df_limmaprint <- df_limmaprint %>% arrange(foldchange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldchange <- (2^abs(df_limmaprint$log2FoldChange))
df_limmaprint <- df_limmaprint %>% arrange(foldchange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint$foldchange <- (2^abs(df_limmaprint$log2FoldChange))
df_limmaprint <- df_limmaprint %>% arrange(log2FoldChange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
resBasal3$foldchange <- (2^abs(resBasal3$log2FoldChange))
resBasal3print <- as.data.frame(resBasal3)
resBasal3print <- resBasal3print %>% arrange(log2FoldChange)
top_n(resBasal3print, 10, log2FoldChange)
top_n(resBasal3print, -10, log2FoldChange)
df_limmaprint <- as.data.frame(df_limma)
df_limmaprint <- df_limmaprint %>% arrange(log2FoldChange)
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
print("SVA Batch effect correction")
top_n(resBasal2print, 10, log2FoldChange)
top_n(resBasal2print, -10, log2FoldChange)
print("RUV housekeeping gene Batch effect correction")
top_n(resBasal3print, 10, log2FoldChange)
top_n(resBasal3print, -10, log2FoldChange)
print("Limma-voom with quantile normalization batch effect correction")
top_n(df_limmaprint, 10, log2FoldChange)
top_n(df_limmaprint, -10, log2FoldChange)
testgenename="ENSG00000126549.5"
plotCounts(ddsMF, gene = testgenename, intgroup=c("condition1"), main="Distribution of STATH expression across groups (before DE analysis)")
testgenename="ENSG00000126549.5"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of STATH expression across groups (before DE analysis)")
genename <- "ENSG00000150991.10"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of UBC expression across groups (before DE analysis)")
genename <- "ENSG00000134644.11"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of PUM1 expression across groups (before DE analysis)")
genename <- "ENSG00000107771.11"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of CCSER2 expression across groups (before DE analysis)")
genename <- "ENSG00000125755.14"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of SYMPK expression across groups (before DE analysis)")
genename <- "ENSG00000132466.13"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of ANKRD17 expression across groups (before DE analysis)")
genename <- "ENSG00000125755.14"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of SYMPK expression across groups (before DE analysis)")
genename <- "ENSG00000107771.11"
plotCounts(dds, gene = genename, intgroup=c("condition1"), main="Distribution of CCSER2 expression across groups (before DE analysis)")
testgenename="ENSG00000126549.5"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of STATH expression across groups (before DE analysis)")
testgenename="ENSG00000171560.10"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of FGA expression across groups (before DE analysis)")
testgenename="ENSG00000126549.5"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of STATH expression across groups (before DE analysis)")
testgenename="ENSG00000102891.3"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of MT4 expression across groups (before DE analysis)")
testgenename="ENSG00000222038.3"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of POTEJ expression across groups (before DE analysis)")
testgenename="ENSG00000257594.2"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of GALNT4 expression across groups (before DE analysis)")
testgenename="ENSG00000183426.11"
plotCounts(dds, gene = testgenename, intgroup=c("condition1"), main="Distribution of NPIPA1 expression across groups (before DE analysis)")
